/*************************************************************************************
 *
 * 文 件 名:   AVLTree.h
 * 描    述: 
 * 
 * 版    本：  V1.0
 * 创 建 者：  01
 * 创建时间：  2021/7/16 10:27
 * ======================================
 * 历史更新记录
 * 版本：V          修改时间：         修改人：
 * 修改内容：
 * ======================================
*************************************************************************************/
// Copyright (c) 2011 rubicon IT GmbH
#pragma once
#include "AVLTreeNode.h"
template<class T>
class AVLTree
{
private:
	AVLTreeNode<T>* root;    // 根结点

public:
    AVLTree();
    ~AVLTree();

 
    // 获取树的高度
     int height();
     //比较大小
     int max(int a, int b);
    // 前序遍历"AVL树"
    void preOrder();
    // 中序遍历"AVL树"
    void inOrder();
    // 后序遍历"AVL树"
    void postOrder();

    // (递归实现)查找"AVL树"中键值为key的节点
    AVLTreeNode<T>* search(T key);
    // (非递归实现)查找"AVL树"中键值为key的节点
    AVLTreeNode<T>* iterativeSearch(T key);

    // 查找最小结点：返回最小结点的键值。
    T minimum();
    // 查找最大结点：返回最大结点的键值。
    T maximum();

    // 将结点(key为节点键值)插入到AVL树中
    void insert(T key);

    // 删除结点(key为节点键值)
    void remove(T key);

    // 销毁AVL树
    void destroy();

    // 打印AVL树
    void print();
private:
    // 获取树的高度
    int height(AVLTreeNode<T>* tree);

    // 前序遍历"AVL树"
    void preOrder(AVLTreeNode<T>* tree) const;
    // 中序遍历"AVL树"
    void inOrder(AVLTreeNode<T>* tree) const;
    // 后序遍历"AVL树"
    void postOrder(AVLTreeNode<T>* tree) const;

    // (递归实现)查找"AVL树x"中键值为key的节点
    AVLTreeNode<T>* search(AVLTreeNode<T>* x, T key) const;
    // (非递归实现)查找"AVL树x"中键值为key的节点
    AVLTreeNode<T>* iterativeSearch(AVLTreeNode<T>* x, T key) const;

    // 查找最小结点：返回tree为根结点的AVL树的最小结点。
    AVLTreeNode<T>* minimum(AVLTreeNode<T>* tree);
    // 查找最大结点：返回tree为根结点的AVL树的最大结点。
    AVLTreeNode<T>* maximum(AVLTreeNode<T>* tree);

    // LL：左左对应的情况(左单旋转)。
    AVLTreeNode<T>* leftLeftRotation(AVLTreeNode<T>* k2);

    // RR：右右对应的情况(右单旋转)。
    AVLTreeNode<T>* rightRightRotation(AVLTreeNode<T>* k1);

    // LR：左右对应的情况(左双旋转)。
    AVLTreeNode<T>* leftRightRotation(AVLTreeNode<T>* k3);

    // RL：右左对应的情况(右双旋转)。
    AVLTreeNode<T>* rightLeftRotation(AVLTreeNode<T>* k1);

    // 将结点(z)插入到AVL树(tree)中
    AVLTreeNode<T>* insert(AVLTreeNode<T>*& tree, T key);

    // 删除AVL树(tree)中的结点(z)，并返回被删除的结点
    AVLTreeNode<T>* remove(AVLTreeNode<T>*& tree, AVLTreeNode<T>* z);

    // 销毁AVL树
    void destroy(AVLTreeNode<T>*& tree);

    // 打印AVL树
    void print(AVLTreeNode<T>* tree, T key, int direction);
};


